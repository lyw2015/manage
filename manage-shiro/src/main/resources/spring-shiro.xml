<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- 会话ID生成器 -->
    <bean id="sessionIdGenerator" class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator"/>

    <!-- 会话DAO -->
    <bean id="sessionDAO" class="com.ozf.laiyw.manage.shiro.session.CustomSessionDao">
        <property name="sessionIdGenerator" ref="sessionIdGenerator"/>
    </bean>

    <!-- 会话Cookie 模板 sessionIdCookie是用于生产Session ID Cookie 的模板；-->
    <bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <!--cookie的name，默认Cookie名称是JSESSIONID 与SERVLET容器名冲突, 如JETTY, TOMCAT
            当跳出SHIRO SERVLET时如ERROR-PAGE容器会为JSESSIONID重新分配值导致登录会话丢失 -->
        <constructor-arg name="name" value="manage.session.id"/>
        <!-- JSESSIONID的path为/用于多个系统共享JSESSIONID -->
        <!-- <property name="path" value="/"/> -->
        <property name="httpOnly" value="true"/>
        <!--maxAge=-1 表示浏览器关闭时失效此Cookie-->
        <property name="maxAge" value="-1"/>
    </bean>

    <!-- 会话管理器使用用于web 环境的DefaultWebSessionManager
        org.apache.shiro.web.session.mgt.DefaultWebSessionManager
        com.ozf.laiyw.manage.shiro.core.ShiroWebSessionManager
    -->
    <bean id="sessionManager" class="com.ozf.laiyw.manage.shiro.core.ShiroWebSessionManager">
        <!-- 设置全局会话超时时间，默认30分钟(1800000) -->
        <property name="globalSessionTimeout" value="${shiro.session.effective.time}"/>
        <!-- 是否删除无效Session，默认也是开启 -->
        <property name="deleteInvalidSessions" value="true"/>
        <!--登录页面不携带sessionid 1.3.2+版本熟悉-->
        <property name="sessionIdUrlRewritingEnabled" value="false"/>
        <property name="sessionDAO" ref="sessionDAO"/>
        <!--是否启用/禁用Session Id Cookie，默认是启用的；如果禁用后将不会设置Session Id Cookie，即默认使用了Servlet容器的JSESSIONID，且通过URL重写（URL中的“;JSESSIONID=id”部分）保存Session Id-->
        <property name="sessionIdCookieEnabled" value="true"/>
        <property name="sessionIdCookie" ref="sessionIdCookie"/>
        <!--开启会话验证器-->
        <property name="sessionValidationSchedulerEnabled" value="${shiro.session.validation.scheduler.enabled}"/>
        <!--调度时间间隔-->
        <property name="sessionValidationInterval" value="${shiro.session.validation.interval}"/>
    </bean>

    <!--rememberMeCookie 即记住我的Cookie，保存时长7 天-->
    <bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <constructor-arg value="rememberMe"/>
        <property name="httpOnly" value="true"/>
        <property name="maxAge" value="604800"/><!-- 7天-->
    </bean>

    <!-- rememberMe管理器,cipherKey是加密rememberMe Cookie的密钥；默认AES算法；-->
    <bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
        <property name="cipherKey" value="#{T(org.apache.shiro.codec.Base64).decode('4AvVhmFLUs0KTA3Kprsdag==')}"/>
        <property name="cookie" ref="rememberMeCookie"/>
    </bean>

    <!-- 继承自AuthorizingRealm的自定义Realm -->
    <bean id="customAuthorizingRealm" class="com.ozf.laiyw.manage.shiro.realm.CustomAuthorizingRealm">
        <property name="credentialsMatcher">
            <bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
                <!-- 加密的方式 -->
                <constructor-arg index="0" type="java.lang.String" value="${shiro.encryption.method}"/>
                <!-- 加密的次数，默认是1次 -->
                <property name="hashIterations" value="${shiro.encryption.hashiterations}"/>
            </bean>
        </property>
    </bean>

    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="sessionManager" ref="sessionManager"></property>
        <property name="rememberMeManager" ref="rememberMeManager"/>
        <property name="realms">
            <list>
                <ref bean="customAuthorizingRealm"/>
            </list>
        </property>
    </bean>

    <!-- 相当于调用SecurityUtils.setSecurityManager(securityManager) -->
    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod" value="org.apache.shiro.SecurityUtils.setSecurityManager"/>
        <property name="arguments" ref="securityManager"/>
    </bean>

    <!--<bean id="logoutFilter" class="org.apache.shiro.web.filter.authc.LogoutFilter">
        <property name="redirectUrl" value="/login.html"/>
    </bean>-->

    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <!-- Shiro的核心安全接口,这个属性是必须的 -->
        <property name="securityManager" ref="securityManager"/>
        <property name="loginUrl" value="/login.html"/>
        <!-- <property name="filters">
             <util:map>
                 <entry key="logout" value-ref="logoutFilter"/>
             </util:map>
         </property>-->
        <property name="filterChainDefinitions">
            <value>
                /statics/**=anon
                /plugins/**=anon
                /favicon.ico=anon
                /login.html=anon
                /manage/login=anon
                /activiti/**=authc
                /**=user
            </value>
        </property>
    </bean>

    <!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

</beans>